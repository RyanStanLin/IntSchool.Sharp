// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using IntSchool.Sharp.Models;
//
//    var getCurrentAccountInformationResponseModel = GetCurrentAccountInformationResponseModel.FromJson(jsonString);

namespace IntSchool.Sharp.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GetCurrentAccountInformationResponseModel
    {
        [JsonProperty("parentId")]
        public long ParentId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("enName")]
        public string EnName { get; set; }

        [JsonProperty("areaCode")]
        [JsonConverter(typeof(GetCurrentAccountInformationResponseModelParseStringConverter))]
        public long AreaCode { get; set; }

        [JsonProperty("mobile")]
        public string Mobile { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("openId")]
        public string OpenId { get; set; }

        [JsonProperty("teacherName")]
        public string TeacherName { get; set; }

        [JsonProperty("teacherEnName")]
        public string TeacherEnName { get; set; }

        [JsonProperty("isTeacher")]
        public bool IsTeacher { get; set; }

        [JsonProperty("relationship")]
        public string Relationship { get; set; }

        [JsonProperty("isMajor")]
        public bool IsMajor { get; set; }

        [JsonProperty("status")]
        public bool Status { get; set; }

        [JsonProperty("countryName")]
        public string CountryName { get; set; }

        [JsonProperty("workUnit")]
        public string WorkUnit { get; set; }

        [JsonProperty("position")]
        public string Position { get; set; }
    }

    public partial class GetCurrentAccountInformationResponseModel
    {
        public static GetCurrentAccountInformationResponseModel FromJson(string json) => JsonConvert.DeserializeObject<GetCurrentAccountInformationResponseModel>(json, IntSchool.Sharp.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GetCurrentAccountInformationResponseModel self) => JsonConvert.SerializeObject(self, IntSchool.Sharp.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GetCurrentAccountInformationResponseModelParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly GetCurrentAccountInformationResponseModelParseStringConverter Singleton = new GetCurrentAccountInformationResponseModelParseStringConverter();
    }
}
