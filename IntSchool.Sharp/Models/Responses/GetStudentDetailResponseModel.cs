// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using IntSchool.Sharp.Models;
//
//    var getStudentDetailResponse = GetStudentDetailResponseModel.FromJson(jsonString);

namespace IntSchool.Sharp.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GetStudentDetailResponseModel
    {
        [JsonProperty("studentId")]
        public long StudentId { get; set; }

        [JsonProperty("studentNum")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long StudentNum { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("enName")]
        public string EnName { get; set; }

        [JsonProperty("firstName")]
        public string FirstName { get; set; }

        [JsonProperty("lastName")]
        public string LastName { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("countryId")]
        public long CountryId { get; set; }

        [JsonProperty("countryName")]
        public string CountryName { get; set; }

        [JsonProperty("countryEnName")]
        public string CountryEnName { get; set; }

        [JsonProperty("enterYear")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long EnterYear { get; set; }

        [JsonProperty("outDate")]
        public object OutDate { get; set; }

        [JsonProperty("provinceCode")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long ProvinceCode { get; set; }

        [JsonProperty("provinceName")]
        public string ProvinceName { get; set; }

        [JsonProperty("provinceEnName")]
        public string ProvinceEnName { get; set; }

        [JsonProperty("cityCode")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long CityCode { get; set; }

        [JsonProperty("cityName")]
        public string CityName { get; set; }

        [JsonProperty("cityEnName")]
        public string CityEnName { get; set; }

        [JsonProperty("districtCode")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long DistrictCode { get; set; }

        [JsonProperty("districtName")]
        public string DistrictName { get; set; }

        [JsonProperty("districtEnName")]
        public string DistrictEnName { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("houseGroupId")]
        public long HouseGroupId { get; set; }

        [JsonProperty("houseName")]
        public string HouseName { get; set; }

        [JsonProperty("houseGroupName")]
        public string HouseGroupName { get; set; }

        [JsonProperty("boarding")]
        public bool Boarding { get; set; }

        [JsonProperty("schoolBus")]
        public bool SchoolBus { get; set; }

        [JsonProperty("busRoute")]
        public object BusRoute { get; set; }

        [JsonProperty("busRoutName")]
        public string BusRoutName { get; set; }

        [JsonProperty("busRoutEnName")]
        public string BusRoutEnName { get; set; }

        [JsonProperty("busSite")]
        public object BusSite { get; set; }

        [JsonProperty("busSiteName")]
        public string BusSiteName { get; set; }

        [JsonProperty("busSiteEnName")]
        public string BusSiteEnName { get; set; }

        [JsonProperty("idType")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long IdType { get; set; }

        [JsonProperty("idNum")]
        public string IdNum { get; set; }

        [JsonProperty("avatarUrl")]
        public Uri AvatarUrl { get; set; }

        [JsonProperty("gender")]
        public string Gender { get; set; }

        [JsonProperty("birthday")]
        public long Birthday { get; set; }

        [JsonProperty("status")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long Status { get; set; }

        [JsonProperty("sectionId")]
        public long SectionId { get; set; }

        [JsonProperty("sectionName")]
        public string SectionName { get; set; }

        [JsonProperty("sectionEnName")]
        public string SectionEnName { get; set; }

        [JsonProperty("classId")]
        public long ClassId { get; set; }

        [JsonProperty("className")]
        public string ClassName { get; set; }

        [JsonProperty("canLogin")]
        public bool CanLogin { get; set; }

        [JsonProperty("siblings")]
        public List<object> Siblings { get; set; }

        [JsonProperty("enterDate")]
        public long EnterDate { get; set; }

        [JsonProperty("bedId")]
        public object BedId { get; set; }

        [JsonProperty("dormitoryName")]
        public string DormitoryName { get; set; }

        [JsonProperty("selfStudyRoomId")]
        public object SelfStudyRoomId { get; set; }

        [JsonProperty("selfStudyRoomName")]
        public string SelfStudyRoomName { get; set; }

        [JsonProperty("surname")]
        public string Surname { get; set; }

        [JsonProperty("moniker")]
        public string Moniker { get; set; }

        [JsonProperty("schoolRollStatus")]
        public string SchoolRollStatus { get; set; }

        [JsonProperty("schoolRollNote")]
        public string SchoolRollNote { get; set; }

        [JsonProperty("domicileProvince")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long DomicileProvince { get; set; }

        [JsonProperty("domicileCity")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long DomicileCity { get; set; }

        [JsonProperty("domicileDistrict")]
        [JsonConverter(typeof(GetStudentDetailResponseParseStringConverter))]
        public long DomicileDistrict { get; set; }

        [JsonProperty("domicileAddress")]
        public string DomicileAddress { get; set; }

        [JsonProperty("domicileProvinceName")]
        public string DomicileProvinceName { get; set; }

        [JsonProperty("domicileCityName")]
        public string DomicileCityName { get; set; }

        [JsonProperty("domicileDistrictName")]
        public string DomicileDistrictName { get; set; }
    }

    public partial class GetStudentDetailResponseModel
    {
        public static GetStudentDetailResponseModel FromJson(string json) => JsonConvert.DeserializeObject<GetStudentDetailResponseModel>(json, IntSchool.Sharp.Models.ConverterGetStudentDetailResponse.Settings);
    }

    public static class SerializeGetStudentDetailResponse
    {
        public static string ToJson(this GetStudentDetailResponseModel self) => JsonConvert.SerializeObject(self, IntSchool.Sharp.Models.ConverterGetStudentDetailResponse.Settings);
    }

    internal static class ConverterGetStudentDetailResponse
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GetStudentDetailResponseParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly GetStudentDetailResponseParseStringConverter Singleton = new GetStudentDetailResponseParseStringConverter();
    }
}
