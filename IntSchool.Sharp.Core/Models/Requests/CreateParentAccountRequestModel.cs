// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using IntSchool.Sharp.Core.Models;
//
//    var createParentAccountRequestModel = CreateParentAccountRequestModel.FromJson(jsonString);

namespace IntSchool.Sharp.Core.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CreateParentAccountRequestModel
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("enName")]
        public string EnName { get; set; }

        [JsonProperty("mobile")]
        public string Mobile { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("countryId")]
        public long CountryId { get; set; }

        [JsonProperty("students")]
        public List<CreateParentAccountRequestModelStudent> Students { get; set; }
    }

    public partial class CreateParentAccountRequestModelStudent
    {
        [JsonProperty("canDelete")]
        public bool CanDelete { get; set; }

        [JsonProperty("studentId")]
        public long StudentId { get; set; }

        [JsonProperty("relationship")]
        public string Relationship { get; set; }
    }

    public partial class CreateParentAccountRequestModel
    {
        public static CreateParentAccountRequestModel FromJson(string json) => JsonConvert.DeserializeObject<CreateParentAccountRequestModel>(json, ConverterCreateParentAccountRequestModel.Settings);
    }

    public static class SerializeCreateParentAccountRequestModel
    {
        public static string ToJson(this CreateParentAccountRequestModel self) => JsonConvert.SerializeObject(self, ConverterCreateParentAccountRequestModel.Settings);
    }

    internal static class ConverterCreateParentAccountRequestModel
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
